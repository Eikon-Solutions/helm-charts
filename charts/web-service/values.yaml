# Global configuration
global:
  labels: {}

# Override the full-name given to the deployment resources
fullnameOverride: ""

# Docker image configuration
image:
  repository: "nginx"
  tag: "latest"
  pullPolicy: "IfNotPresent"
  # For private registries, set pullSecrets (created via dockerconfigjson section)
  pullSecrets: []

# Application configuration
config:
  # Command and arguments to override container defaults
  command: []
  args: []
  
  # Environment variables as key-value pairs
  env: {}
    # DATABASE_URL: "postgresql://localhost:5432/myapp"
    # LOG_LEVEL: "info"
  
  # Secrets as key-value pairs (will be base64 encoded)
  secrets: {}
    # DB_PASSWORD: "mysecretpassword"
    # API_KEY: "secret-api-key"
  
  # Pre-encoded base64 secrets
  secretsB64: {}
    # ENCODED_SECRET: "bXlzZWNyZXRwYXNzd29yZA=="

# ConfigMap file mounting (in addition to env vars)
configMaps: []
  # - name: "app-config"
  #   mountPath: "/etc/config"
  #   files:
  #     - key: "app.conf"
  #       contentsB64: ""  # base64 encoded content
  #       contentsFile: "" # or path to local file

# Resource constraints
resources:
  limits:
    cpu: 250m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 64Mi

# Health checks
readinessProbe:
  httpGet:
    path: "/"
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

livenessProbe:
  httpGet:
    path: "/"
    port: 80
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Horizontal Pod Autoscaler
hpa:
  deploy: true
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
  behavior: {}

# Service configuration
service:
  deploy: true
  port: 80
  targetPort: 80
  protocol: "TCP"
  annotations: {}
  
  # Multiple ingress hostnames support
  ingress: {}
    # example-com:
    #   hostname: "example.com"
    #   certificateCreate: true
    #   certificateIssuerName: "letsencrypt-prod"
    #   certificateIssuerKind: "ClusterIssuer"
    #   enableTraefik: true
    #   tlsSecretName: ""  # auto-generated if empty
    #   annotations: {}
    # api-example-com:
    #   hostname: "api.example.com"
    #   annotations:
    #     nginx.ingress.kubernetes.io/rewrite-target: /

# Deployment strategy
deployment:
  replicas: 1  # Only used if HPA is disabled
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxUnavailable: "25%"
      maxSurge: "25%"
  
  # Pod annotations (separate from labels)
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "8080"

# Persistent storage
persistentVolume:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  mountPath: /data
  subPath: ""
  storageClass: ""  # Use default storage class if empty
  labels: {}
  annotations: {}

# Private Docker registry authentication
dockerconfigjson:
  name: ""        # Secret name (auto-generated if empty)
  username: ""
  password: ""
  server: "https://index.docker.io/v1/"
  email: ""

# Grace period for pod termination
terminationGracePeriodSeconds: 30